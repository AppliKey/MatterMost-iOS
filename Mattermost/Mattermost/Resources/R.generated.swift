//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(identifier: "com.applikey.Mattermost") ?? Bundle.main
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 0 files.
  struct file {
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 23 images.
  struct image {
    /// Image `back`.
    static let back = Rswift.ImageResource(bundle: R.hostingBundle, name: "back")
    /// Image `forward`.
    static let forward = Rswift.ImageResource(bundle: R.hostingBundle, name: "forward")
    /// Image `ic-menu`.
    static let icMenu = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-menu")
    /// Image `ic-send`.
    static let icSend = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-send")
    /// Image `ic_attachment`.
    static let ic_attachment = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_attachment")
    /// Image `ic_close`.
    static let ic_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_close")
    /// Image `ic_direct_new`.
    static let ic_direct_new = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_direct_new")
    /// Image `ic_direct_not_active`.
    static let ic_direct_not_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_direct_not_active")
    /// Image `ic_direct`.
    static let ic_direct = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_direct")
    /// Image `ic_fail`.
    static let ic_fail = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_fail")
    /// Image `ic_favorites_new`.
    static let ic_favorites_new = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_favorites_new")
    /// Image `ic_favorites_not_active`.
    static let ic_favorites_not_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_favorites_not_active")
    /// Image `ic_favorites`.
    static let ic_favorites = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_favorites")
    /// Image `ic_private_chanels_new`.
    static let ic_private_chanels_new = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_private_chanels_new")
    /// Image `ic_private_chanels_not_active`.
    static let ic_private_chanels_not_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_private_chanels_not_active")
    /// Image `ic_private_chanels`.
    static let ic_private_chanels = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_private_chanels")
    /// Image `ic_public_chanels_new`.
    static let ic_public_chanels_new = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_public_chanels_new")
    /// Image `ic_public_chanels_not_active`.
    static let ic_public_chanels_not_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_public_chanels_not_active")
    /// Image `ic_public_chanels`.
    static let ic_public_chanels = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_public_chanels")
    /// Image `ic_unread_not_active`.
    static let ic_unread_not_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_unread_not_active")
    /// Image `ic_unread`.
    static let ic_unread = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_unread")
    /// Image `newGroupBanner`.
    static let newGroupBanner = Rswift.ImageResource(bundle: R.hostingBundle, name: "newGroupBanner")
    /// Image `placeholderSmall`.
    static let placeholderSmall = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholderSmall")
    
    /// `UIImage(named: "back", bundle: ..., traitCollection: ...)`
    static func back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "forward", bundle: ..., traitCollection: ...)`
    static func forward(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.forward, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-menu", bundle: ..., traitCollection: ...)`
    static func icMenu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icMenu, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-send", bundle: ..., traitCollection: ...)`
    static func icSend(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icSend, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_attachment", bundle: ..., traitCollection: ...)`
    static func ic_attachment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_attachment, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_close", bundle: ..., traitCollection: ...)`
    static func ic_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_close, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_direct", bundle: ..., traitCollection: ...)`
    static func ic_direct(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_direct, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_direct_new", bundle: ..., traitCollection: ...)`
    static func ic_direct_new(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_direct_new, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_direct_not_active", bundle: ..., traitCollection: ...)`
    static func ic_direct_not_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_direct_not_active, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_fail", bundle: ..., traitCollection: ...)`
    static func ic_fail(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_fail, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_favorites", bundle: ..., traitCollection: ...)`
    static func ic_favorites(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_favorites, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_favorites_new", bundle: ..., traitCollection: ...)`
    static func ic_favorites_new(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_favorites_new, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_favorites_not_active", bundle: ..., traitCollection: ...)`
    static func ic_favorites_not_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_favorites_not_active, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_private_chanels", bundle: ..., traitCollection: ...)`
    static func ic_private_chanels(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_private_chanels, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_private_chanels_new", bundle: ..., traitCollection: ...)`
    static func ic_private_chanels_new(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_private_chanels_new, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_private_chanels_not_active", bundle: ..., traitCollection: ...)`
    static func ic_private_chanels_not_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_private_chanels_not_active, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_public_chanels", bundle: ..., traitCollection: ...)`
    static func ic_public_chanels(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_public_chanels, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_public_chanels_new", bundle: ..., traitCollection: ...)`
    static func ic_public_chanels_new(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_public_chanels_new, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_public_chanels_not_active", bundle: ..., traitCollection: ...)`
    static func ic_public_chanels_not_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_public_chanels_not_active, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_unread", bundle: ..., traitCollection: ...)`
    static func ic_unread(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_unread, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_unread_not_active", bundle: ..., traitCollection: ...)`
    static func ic_unread_not_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_unread_not_active, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "newGroupBanner", bundle: ..., traitCollection: ...)`
    static func newGroupBanner(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.newGroupBanner, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "placeholderSmall", bundle: ..., traitCollection: ...)`
    static func placeholderSmall(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholderSmall, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 8 nibs.
  struct nib {
    /// Nib `DirectMessageCell`.
    static let directMessageCell = _R.nib._DirectMessageCell()
    /// Nib `GroupChatCell`.
    static let groupChatCell = _R.nib._GroupChatCell()
    /// Nib `GroupMessageCell`.
    static let groupMessageCell = _R.nib._GroupMessageCell()
    /// Nib `ImageCollectionViewCell`.
    static let imageCollectionViewCell = _R.nib._ImageCollectionViewCell()
    /// Nib `LabelCollectionViewCell`.
    static let labelCollectionViewCell = _R.nib._LabelCollectionViewCell()
    /// Nib `MyMessagesCell`.
    static let myMessagesCell = _R.nib._MyMessagesCell()
    /// Nib `SingleChatCell`.
    static let singleChatCell = _R.nib._SingleChatCell()
    /// Nib `TeamCell`.
    static let teamCell = _R.nib._TeamCell()
    
    /// `UINib(name: "DirectMessageCell", in: bundle)`
    static func directMessageCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.directMessageCell)
    }
    
    /// `UINib(name: "GroupChatCell", in: bundle)`
    static func groupChatCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.groupChatCell)
    }
    
    /// `UINib(name: "GroupMessageCell", in: bundle)`
    static func groupMessageCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.groupMessageCell)
    }
    
    /// `UINib(name: "ImageCollectionViewCell", in: bundle)`
    static func imageCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.imageCollectionViewCell)
    }
    
    /// `UINib(name: "LabelCollectionViewCell", in: bundle)`
    static func labelCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.labelCollectionViewCell)
    }
    
    /// `UINib(name: "MyMessagesCell", in: bundle)`
    static func myMessagesCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.myMessagesCell)
    }
    
    /// `UINib(name: "SingleChatCell", in: bundle)`
    static func singleChatCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.singleChatCell)
    }
    
    /// `UINib(name: "TeamCell", in: bundle)`
    static func teamCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.teamCell)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 8 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `DirectMessageCell`.
    static let directMessageCell: Rswift.ReuseIdentifier<DirectMessageCell> = Rswift.ReuseIdentifier(identifier: "DirectMessageCell")
    /// Reuse identifier `GroupChatCell`.
    static let groupChatCell: Rswift.ReuseIdentifier<GroupChatCell> = Rswift.ReuseIdentifier(identifier: "GroupChatCell")
    /// Reuse identifier `GroupMessageCell`.
    static let groupMessageCell: Rswift.ReuseIdentifier<GroupMessageCell> = Rswift.ReuseIdentifier(identifier: "GroupMessageCell")
    /// Reuse identifier `ImageCollectionViewCell`.
    static let imageCollectionViewCell: Rswift.ReuseIdentifier<ImageCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "ImageCollectionViewCell")
    /// Reuse identifier `LabelCell`.
    static let labelCell: Rswift.ReuseIdentifier<LabelCell> = Rswift.ReuseIdentifier(identifier: "LabelCell")
    /// Reuse identifier `LabelCollectionViewCell`.
    static let labelCollectionViewCell: Rswift.ReuseIdentifier<LabelCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "LabelCollectionViewCell")
    /// Reuse identifier `MyMessagesCell`.
    static let myMessagesCell: Rswift.ReuseIdentifier<MyMessagesCell> = Rswift.ReuseIdentifier(identifier: "MyMessagesCell")
    /// Reuse identifier `SingleChatCell`.
    static let singleChatCell: Rswift.ReuseIdentifier<SingleChatCell> = Rswift.ReuseIdentifier(identifier: "SingleChatCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 4 storyboards.
  struct storyboard {
    /// Storyboard `Authorization`.
    static let authorization = _R.storyboard.authorization()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `Menu`.
    static let menu = _R.storyboard.menu()
    
    /// `UIStoryboard(name: "Authorization", bundle: ...)`
    static func authorization(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.authorization)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    /// `UIStoryboard(name: "Menu", bundle: ...)`
    static func menu(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.menu)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 35 localization keys.
    struct localizable {
      /// Value: Address format is not valid
      static let serverAddressWrongFormat = Rswift.StringResource(key: "server.address.wrong.format", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: All your team communication in one  place, searchable and accessible  anywhere.
      static let description = Rswift.StringResource(key: "description", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Are you sure you want to logout?
      static let settingsLogoutAlertMessage = Rswift.StringResource(key: "settings.logout.alert.message", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: EMAIL
      static let emailFieldHint = Rswift.StringResource(key: "email.field.hint", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: ENTER SERVER URL
      static let serverFieldHint = Rswift.StringResource(key: "server.field.hint", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Edit profile
      static let settingsEditProfile = Rswift.StringResource(key: "settings.edit.profile", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Email is invalid
      static let emailNotValid = Rswift.StringResource(key: "email.not.valid", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Enter your email
      static let emailFieldPlaceholder = Rswift.StringResource(key: "email.field.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Enter your password
      static let passwordFieldPlaceholder = Rswift.StringResource(key: "password.field.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: FORGOT PASSWORD
      static let forgotPassword = Rswift.StringResource(key: "forgot.password", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Find more channels
      static let menuItemChannels = Rswift.StringResource(key: "menu.item.channels", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Invite new member
      static let menuItemInvite = Rswift.StringResource(key: "menu.item.invite", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Loading...
      static let loadingMessagesTitle = Rswift.StringResource(key: "loading.messages.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Logout
      static let settingsLogout = Rswift.StringResource(key: "settings.logout", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: NEW GROUP OR CHANNEL
      static let newGroupChannel = Rswift.StringResource(key: "new.group.channel", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: NEXT
      static let nextButtonTitle = Rswift.StringResource(key: "next.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: New messages
      static let newMessages = Rswift.StringResource(key: "new.messages", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: No
      static let noAlertTitle = Rswift.StringResource(key: "no.alert.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: No messages yet =(
      static let noMessages = Rswift.StringResource(key: "no.messages", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Ok
      static let okAlertTitle = Rswift.StringResource(key: "ok.alert.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: PASSWORD
      static let passwordFieldHint = Rswift.StringResource(key: "password.field.hint", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Password is invalid
      static let passwordNotValid = Rswift.StringResource(key: "password.not.valid", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please check your email
      static let passwordWasReset = Rswift.StringResource(key: "password.was.reset", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: SEND
      static let sendButtonTitle = Rswift.StringResource(key: "send.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Select your team
      static let teamSelectionHeader = Rswift.StringResource(key: "team.selection.header", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Settings
      static let menuItemSettings = Rswift.StringResource(key: "menu.item.settings", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Settings
      static let settingsTitle = Rswift.StringResource(key: "settings.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Today
      static let timeToday = Rswift.StringResource(key: "time.today", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Unknown server error
      static let unknownServerError = Rswift.StringResource(key: "unknown.server.error", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Unread messages
      static let settingsUnreadMessages = Rswift.StringResource(key: "settings.unread.messages", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: We could not connect to the Mattermost server or the server is running in an incompatible version
      static let serverIsWrong = Rswift.StringResource(key: "server.is.wrong", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Welcome to Mattermost
      static let welcome = Rswift.StringResource(key: "welcome", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Yes
      static let yesAlertTitle = Rswift.StringResource(key: "yes.alert.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Yesterday
      static let timeYesterday = Rswift.StringResource(key: "time.yesterday", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: http://server.com/
      static let serverFieldPlaceholder = Rswift.StringResource(key: "server.field.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      
      /// Value: Address format is not valid
      static func serverAddressWrongFormat(_: Void = ()) -> String {
        return NSLocalizedString("server.address.wrong.format", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: All your team communication in one  place, searchable and accessible  anywhere.
      static func description(_: Void = ()) -> String {
        return NSLocalizedString("description", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Are you sure you want to logout?
      static func settingsLogoutAlertMessage(_: Void = ()) -> String {
        return NSLocalizedString("settings.logout.alert.message", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: EMAIL
      static func emailFieldHint(_: Void = ()) -> String {
        return NSLocalizedString("email.field.hint", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: ENTER SERVER URL
      static func serverFieldHint(_: Void = ()) -> String {
        return NSLocalizedString("server.field.hint", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Edit profile
      static func settingsEditProfile(_: Void = ()) -> String {
        return NSLocalizedString("settings.edit.profile", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Email is invalid
      static func emailNotValid(_: Void = ()) -> String {
        return NSLocalizedString("email.not.valid", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Enter your email
      static func emailFieldPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("email.field.placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Enter your password
      static func passwordFieldPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("password.field.placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: FORGOT PASSWORD
      static func forgotPassword(_: Void = ()) -> String {
        return NSLocalizedString("forgot.password", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Find more channels
      static func menuItemChannels(_: Void = ()) -> String {
        return NSLocalizedString("menu.item.channels", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Invite new member
      static func menuItemInvite(_: Void = ()) -> String {
        return NSLocalizedString("menu.item.invite", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Loading...
      static func loadingMessagesTitle(_: Void = ()) -> String {
        return NSLocalizedString("loading.messages.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Logout
      static func settingsLogout(_: Void = ()) -> String {
        return NSLocalizedString("settings.logout", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: NEW GROUP OR CHANNEL
      static func newGroupChannel(_: Void = ()) -> String {
        return NSLocalizedString("new.group.channel", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: NEXT
      static func nextButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("next.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: New messages
      static func newMessages(_: Void = ()) -> String {
        return NSLocalizedString("new.messages", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: No
      static func noAlertTitle(_: Void = ()) -> String {
        return NSLocalizedString("no.alert.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: No messages yet =(
      static func noMessages(_: Void = ()) -> String {
        return NSLocalizedString("no.messages", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Ok
      static func okAlertTitle(_: Void = ()) -> String {
        return NSLocalizedString("ok.alert.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: PASSWORD
      static func passwordFieldHint(_: Void = ()) -> String {
        return NSLocalizedString("password.field.hint", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Password is invalid
      static func passwordNotValid(_: Void = ()) -> String {
        return NSLocalizedString("password.not.valid", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Please check your email
      static func passwordWasReset(_: Void = ()) -> String {
        return NSLocalizedString("password.was.reset", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: SEND
      static func sendButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("send.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Select your team
      static func teamSelectionHeader(_: Void = ()) -> String {
        return NSLocalizedString("team.selection.header", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Settings
      static func menuItemSettings(_: Void = ()) -> String {
        return NSLocalizedString("menu.item.settings", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Settings
      static func settingsTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Today
      static func timeToday(_: Void = ()) -> String {
        return NSLocalizedString("time.today", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Unknown server error
      static func unknownServerError(_: Void = ()) -> String {
        return NSLocalizedString("unknown.server.error", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Unread messages
      static func settingsUnreadMessages(_: Void = ()) -> String {
        return NSLocalizedString("settings.unread.messages", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: We could not connect to the Mattermost server or the server is running in an incompatible version
      static func serverIsWrong(_: Void = ()) -> String {
        return NSLocalizedString("server.is.wrong", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Welcome to Mattermost
      static func welcome(_: Void = ()) -> String {
        return NSLocalizedString("welcome", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Yes
      static func yesAlertTitle(_: Void = ()) -> String {
        return NSLocalizedString("yes.alert.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Yesterday
      static func timeYesterday(_: Void = ()) -> String {
        return NSLocalizedString("time.yesterday", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: http://server.com/
      static func serverFieldPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("server.field.placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _MyMessagesCell.validate()
      try _TeamCell.validate()
      try _GroupChatCell.validate()
    }
    
    struct _DirectMessageCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = DirectMessageCell
      
      let bundle = R.hostingBundle
      let identifier = "DirectMessageCell"
      let name = "DirectMessageCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> DirectMessageCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DirectMessageCell
      }
      
      fileprivate init() {}
    }
    
    struct _GroupChatCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = GroupChatCell
      
      let bundle = R.hostingBundle
      let identifier = "GroupChatCell"
      let name = "GroupChatCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> GroupChatCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GroupChatCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_private_chanels_not_active") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_private_chanels_not_active' is used in nib 'GroupChatCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _GroupMessageCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = GroupMessageCell
      
      let bundle = R.hostingBundle
      let identifier = "GroupMessageCell"
      let name = "GroupMessageCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> GroupMessageCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GroupMessageCell
      }
      
      fileprivate init() {}
    }
    
    struct _ImageCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ImageCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "ImageCollectionViewCell"
      let name = "ImageCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ImageCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ImageCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _LabelCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = LabelCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "LabelCollectionViewCell"
      let name = "LabelCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> LabelCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LabelCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _MyMessagesCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = MyMessagesCell
      
      let bundle = R.hostingBundle
      let identifier = "MyMessagesCell"
      let name = "MyMessagesCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MyMessagesCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyMessagesCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_fail") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_fail' is used in nib 'MyMessagesCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _SingleChatCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SingleChatCell
      
      let bundle = R.hostingBundle
      let identifier = "SingleChatCell"
      let name = "SingleChatCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SingleChatCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SingleChatCell
      }
      
      fileprivate init() {}
    }
    
    struct _TeamCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "TeamCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> TeamCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TeamCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "forward") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'forward' is used in nib 'TeamCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
      try menu.validate()
      try authorization.validate()
    }
    
    struct authorization: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let forgotPassViewController = StoryboardViewControllerResource<Mattermost.ForgotPassViewController>(identifier: "ForgotPassViewController")
      let name = "Authorization"
      let serverSelectionViewController = StoryboardViewControllerResource<Mattermost.ServerSelectionViewController>(identifier: "ServerSelectionViewController")
      let signInViewController = StoryboardViewControllerResource<Mattermost.SignInViewController>(identifier: "SignInViewController")
      let teamSelectionViewController = StoryboardViewControllerResource<Mattermost.TeamSelectionViewController>(identifier: "TeamSelectionViewController")
      
      func forgotPassViewController(_: Void = ()) -> Mattermost.ForgotPassViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: forgotPassViewController)
      }
      
      func serverSelectionViewController(_: Void = ()) -> Mattermost.ServerSelectionViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: serverSelectionViewController)
      }
      
      func signInViewController(_: Void = ()) -> Mattermost.SignInViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signInViewController)
      }
      
      func teamSelectionViewController(_: Void = ()) -> Mattermost.TeamSelectionViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: teamSelectionViewController)
      }
      
      static func validate() throws {
        if _R.storyboard.authorization().signInViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signInViewController' could not be loaded from storyboard 'Authorization' as 'Mattermost.SignInViewController'.") }
        if _R.storyboard.authorization().forgotPassViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'forgotPassViewController' could not be loaded from storyboard 'Authorization' as 'Mattermost.ForgotPassViewController'.") }
        if _R.storyboard.authorization().serverSelectionViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'serverSelectionViewController' could not be loaded from storyboard 'Authorization' as 'Mattermost.ServerSelectionViewController'.") }
        if _R.storyboard.authorization().teamSelectionViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'teamSelectionViewController' could not be loaded from storyboard 'Authorization' as 'Mattermost.TeamSelectionViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let chatDetailsViewController = StoryboardViewControllerResource<ChatDetailsViewController>(identifier: "ChatDetailsViewController")
      let chats = StoryboardViewControllerResource<ChatsViewController>(identifier: "Chats")
      let name = "Main"
      let tabBar = StoryboardViewControllerResource<UIKit.UITabBarController>(identifier: "TabBar")
      
      func chatDetailsViewController(_: Void = ()) -> ChatDetailsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: chatDetailsViewController)
      }
      
      func chats(_: Void = ()) -> ChatsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: chats)
      }
      
      func tabBar(_: Void = ()) -> UIKit.UITabBarController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: tabBar)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_attachment") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_attachment' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_close") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_close' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-send") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic-send' is used in storyboard 'Main', but couldn't be loaded.") }
        if _R.storyboard.main().chats() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'chats' could not be loaded from storyboard 'Main' as 'ChatsViewController'.") }
        if _R.storyboard.main().tabBar() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'tabBar' could not be loaded from storyboard 'Main' as 'UIKit.UITabBarController'.") }
        if _R.storyboard.main().chatDetailsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'chatDetailsViewController' could not be loaded from storyboard 'Main' as 'ChatDetailsViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct menu: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let menuViewController = StoryboardViewControllerResource<MenuViewController>(identifier: "MenuViewController")
      let name = "Menu"
      let settingsViewController = StoryboardViewControllerResource<SettingsViewController>(identifier: "SettingsViewController")
      
      func menuViewController(_: Void = ()) -> MenuViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: menuViewController)
      }
      
      func settingsViewController(_: Void = ()) -> SettingsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settingsViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "newGroupBanner") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'newGroupBanner' is used in storyboard 'Menu', but couldn't be loaded.") }
        if _R.storyboard.menu().menuViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'menuViewController' could not be loaded from storyboard 'Menu' as 'MenuViewController'.") }
        if _R.storyboard.menu().settingsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settingsViewController' could not be loaded from storyboard 'Menu' as 'SettingsViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}